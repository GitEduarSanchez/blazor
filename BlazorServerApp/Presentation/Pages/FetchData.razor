@page "/fetchdata"
@using Domain.Entity
@using Domain.Ports
@inject IWeatherForecastService ForecastService
@inject ISnackbar Snackbar
<MudTabs Outlined="true">
    <MudTabPanel Text="Api" Icon="@Icons.Material.Filled.Api" />
    <MudTabPanel Icon="@Icons.Material.Filled.Build" />
    <MudTabPanel Text="Bug Report" Icon="@Icons.Material.Filled.BugReport" />
</MudTabs>
<PageTitle>Weather forecast</PageTitle>
<h1>Weather forecast</h1>

<p>Este componente demuestra cómo obtener datos de un servicio.</p>

@if (forecasts == null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
}
else
{
    <MudTable Items="forecasts" Striped="true" Hover="true">
        <HeaderContent>
            <MudTh>Fecha</MudTh>
            <MudTh>Temp. (C)</MudTh>
            <MudTh>Temp. (F)</MudTh>
            <MudTh>Resumen</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Fecha">@context.Date.ToShortDateString()</MudTd>
            <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
            <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
            <MudTd DataLabel="Resumen">@context.Summary</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {  
   private WeatherForecastEntity[]? forecasts;  

   protected override async Task OnInitializedAsync()  
   {  
       await Task.Delay(2000);  
       forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));  
   }  
}
